Title="ExplorerX"
Icon="explorerx.png"
---
<?php
/*
 * ExplorerX - Advanced Native File Manager for Unraid
 * Copyright (c) 2025 N85UK
 * 
 * A powerful native file manager with multi-pane navigation,
 * bulk operations, and background task queue.
 */

// Basic configuration
$root_path = '/mnt';
$current_path = $_GET['path'] ?? $root_path;

// Simple path sanitization
$current_path = realpath($current_path) ?: $root_path;
if (strpos($current_path, $root_path) !== 0) {
    $current_path = $root_path;
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ExplorerX - File Manager</title>
    
    <link rel="stylesheet" href="/webGui/styles/default.css">
    <style>
        .explorerx-container {
            padding: 20px;
            background: #f0f0f0;
            border-radius: 8px;
            margin: 20px 0;
        }
        
        .explorerx-header {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #ddd;
        }
        
        .explorerx-header h1 {
            margin: 0;
            color: #333;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .breadcrumb {
            background: #fff;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-bottom: 10px;
            font-family: monospace;
        }
        
        .file-list {
            background: #fff;
            border: 1px solid #ddd;
            border-radius: 4px;
            overflow: hidden;
        }
        
        .file-list table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .file-list th {
            background: #f5f5f5;
            padding: 12px;
            border-bottom: 1px solid #ddd;
            text-align: left;
            font-weight: bold;
        }
        
        .file-list td {
            padding: 10px 12px;
            border-bottom: 1px solid #eee;
        }
        
        .file-list tr:hover {
            background: #f9f9f9;
        }
        
        .file-icon {
            width: 16px;
            height: 16px;
            margin-right: 8px;
        }
        
        .file-link {
            color: #0066cc;
            text-decoration: none;
            cursor: pointer;
        }
        
        .file-link:hover {
            text-decoration: underline;
        }
        
        .toolbar {
            margin-bottom: 15px;
        }
        
        .btn {
            background: #4CAF50;
            color: white;
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 10px;
        }
        
        .btn:hover {
            background: #45a049;
        }
        
        .btn:disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        
        .error {
            background: #f8d7da;
            color: #721c24;
            padding: 10px;
            border: 1px solid #f5c6cb;
            border-radius: 4px;
            margin: 10px 0;
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: #666;
        }
    </style>
</head>
<body>

<div class="explorerx-container">
    <div class="explorerx-header">
        <h1>
            üìÅ ExplorerX File Manager
        </h1>
    </div>
    
    <div class="toolbar">
        <button class="btn" onclick="refreshDirectory()">üîÑ Refresh</button>
        <button class="btn" onclick="goToParent()">‚¨ÜÔ∏è Parent Directory</button>
        <button class="btn" onclick="goHome()">üè† Home (/mnt)</button>
        <div style="float: right;">
            <span id="version-info" style="margin-right: 15px; color: #666;">v<?php echo htmlspecialchars($current_path); ?></span>
            <div id="update-notification" style="display: none; background: #d4edda; color: #155724; padding: 4px 8px; border: 1px solid #c3e6cb; border-radius: 4px; font-size: 12px;">
                <span id="update-message">Update available!</span>
                <a href="#" onclick="checkForUpdates(true)" style="margin-left: 8px; color: #155724; text-decoration: underline;">Details</a>
            </div>
        </div>
        <div style="clear: both;"></div>
    </div>
    
    <div class="breadcrumb" id="current-path">
        Current Path: <?php echo htmlspecialchars($current_path); ?>
    </div>
    
    <div class="file-list" id="file-list">
        <div class="loading">Loading directory contents...</div>
    </div>
</div>

<script>
// Simple configuration
window.currentPath = <?php echo json_encode($current_path); ?>;
window.pluginVersion = '0.1.0';
window.versionCheckURL = 'https://github.com/N85UK/UNRAID_Apps/raw/main/ExplorerX_Plugin/version.json';

// Initialize
document.addEventListener('DOMContentLoaded', function() {
    loadDirectory(window.currentPath);
    checkForUpdates();
    
    // Check for updates every 6 hours
    setInterval(checkForUpdates, 6 * 60 * 60 * 1000);
});

function checkForUpdates(showDetails = false) {
    fetch(window.versionCheckURL)
        .then(response => response.json())
        .then(data => {
            const currentVersion = window.pluginVersion;
            const latestVersion = data.version;
            
            document.getElementById('version-info').textContent = 'v' + currentVersion;
            
            if (compareVersions(latestVersion, currentVersion) > 0) {
                const notification = document.getElementById('update-notification');
                const message = document.getElementById('update-message');
                
                message.textContent = `Update available: v${latestVersion}`;
                notification.style.display = 'inline-block';
                
                if (showDetails) {
                    showUpdateDetails(data);
                }
            } else if (showDetails) {
                alert('ExplorerX is up to date (v' + currentVersion + ')');
            }
        })
        .catch(error => {
            console.log('Version check failed:', error);
            if (showDetails) {
                alert('Could not check for updates. Please check your internet connection.');
            }
        });
}

function showUpdateDetails(versionData) {
    const changes = versionData.changelog[0]?.changes || [];
    const changeList = changes.map(change => '‚Ä¢ ' + change).join('\n');
    
    const message = `ExplorerX Update Available!
    
Current Version: v${window.pluginVersion}
Latest Version: v${versionData.version}
Release Date: ${versionData.date}

What's New:
${changeList}

To update:
1. Go to Plugins tab in UNRAID
2. Check for plugin updates
3. Click "Update" next to ExplorerX

Support: ${versionData.support_url}`;

    alert(message);
}

function compareVersions(a, b) {
    const partsA = a.split('.').map(Number);
    const partsB = b.split('.').map(Number);
    
    for (let i = 0; i < Math.max(partsA.length, partsB.length); i++) {
        const partA = partsA[i] || 0;
        const partB = partsB[i] || 0;
        
        if (partA > partB) return 1;
        if (partA < partB) return -1;
    }
    
    return 0;
}

function loadDirectory(path) {
    const fileList = document.getElementById('file-list');
    fileList.innerHTML = '<div class="loading">Loading directory contents...</div>';
    
    // Simple fetch to list directory
    fetch('/plugins/explorerx/include/api.php?action=list&path=' + encodeURIComponent(path))
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                displayFiles(data.data);
                updateBreadcrumb(path);
            } else {
                showError(data.error || 'Failed to load directory');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showError('Failed to connect to server');
        });
}

function displayFiles(data) {
    const fileList = document.getElementById('file-list');
    
    if (!data.items || data.items.length === 0) {
        fileList.innerHTML = '<div style="padding: 20px; text-align: center; color: #666;">Directory is empty</div>';
        return;
    }
    
    let html = '<table><thead><tr>';
    html += '<th>Type</th>';
    html += '<th>Name</th>';
    html += '<th>Size</th>';
    html += '<th>Modified</th>';
    html += '</tr></thead><tbody>';
    
    data.items.forEach(item => {
        const icon = item.type === 'directory' ? 'üìÅ' : 'üìÑ';
        const size = item.type === 'directory' ? '-' : formatBytes(item.size);
        const modified = new Date(item.modified * 1000).toLocaleString();
        
        html += '<tr>';
        html += '<td>' + icon + '</td>';
        
        if (item.type === 'directory') {
            html += '<td><a href="#" class="file-link" onclick="navigateToDirectory(\'' + 
                    escapeHtml(item.path) + '\')">' + escapeHtml(item.name) + '</a></td>';
        } else {
            html += '<td>' + escapeHtml(item.name) + '</td>';
        }
        
        html += '<td>' + size + '</td>';
        html += '<td>' + modified + '</td>';
        html += '</tr>';
    });
    
    html += '</tbody></table>';
    fileList.innerHTML = html;
}

function navigateToDirectory(path) {
    window.currentPath = path;
    loadDirectory(path);
}

function updateBreadcrumb(path) {
    document.getElementById('current-path').textContent = 'Current Path: ' + path;
}

function showError(message) {
    const fileList = document.getElementById('file-list');
    fileList.innerHTML = '<div class="error">Error: ' + escapeHtml(message) + '</div>';
}

function refreshDirectory() {
    loadDirectory(window.currentPath);
}

function goToParent() {
    const parentPath = window.currentPath.replace(/\/[^\/]*$/, '') || '/mnt';
    navigateToDirectory(parentPath);
}

function goHome() {
    navigateToDirectory('/mnt');
}

function formatBytes(bytes) {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}
</script>

</body>
</html>
