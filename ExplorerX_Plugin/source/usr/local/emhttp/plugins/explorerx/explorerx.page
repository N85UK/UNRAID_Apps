Menu="61"
Title="ExplorerX"
Icon="explorerx.png"
---
<!DOCTYPE html>
<html>
<head>
    <title>ExplorerX File Manager</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .container { max-width: 1200px; margin: 0 auto; }
        .header { border-bottom: 1px solid #ccc; padding-bottom: 10px; margin-bottom: 20px; }
        .toolbar { margin-bottom: 15px; }
        .btn { background: #4CAF50; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer; margin-right: 10px; }
        .breadcrumb { background: #f5f5f5; padding: 10px; border: 1px solid #ddd; margin-bottom: 10px; }
        .file-list { border: 1px solid #ddd; }
        .file-list table { width: 100%; border-collapse: collapse; }
        .file-list th, .file-list td { padding: 8px; border-bottom: 1px solid #eee; text-align: left; }
        .file-list th { background: #f5f5f5; font-weight: bold; }
        .file-link { color: #0066cc; text-decoration: none; cursor: pointer; }
        .file-link:hover { text-decoration: underline; }
        .error { color: #d32f2f; background: #ffebee; padding: 10px; border: 1px solid #f8bbd9; border-radius: 4px; }
        .loading { text-align: center; padding: 20px; color: #666; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìÅ ExplorerX File Manager</h1>
            <p>Simple file browser for UNRAID</p>
        </div>
        
        <div class="toolbar">
            <button class="btn" onclick="refreshDirectory()">üîÑ Refresh</button>
            <button class="btn" onclick="goToParent()">‚¨ÜÔ∏è Parent</button>
            <button class="btn" onclick="goHome()">üè† Home</button>
        </div>
        
        <div class="breadcrumb" id="current-path">
            Current: /mnt
        </div>
        
        <div class="file-list">
            <div id="file-content" class="loading">
                Loading directory contents...
            </div>
        </div>
    </div>

    <script>
        let currentPath = '/mnt';
        
        document.addEventListener('DOMContentLoaded', function() {
            loadDirectory(currentPath);
        });
        
        function loadDirectory(path) {
            const content = document.getElementById('file-content');
            content.innerHTML = '<div class="loading">Loading...</div>';
            
            fetch('/plugins/explorerx/include/api.php?action=list&path=' + encodeURIComponent(path))
                .then(response => {
                    if (!response.ok) {
                        throw new Error('HTTP ' + response.status);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success && data.data) {
                        displayFiles(data.data);
                        updateBreadcrumb(path);
                        currentPath = path;
                    } else {
                        showError('Failed to load directory: ' + (data.error || 'Unknown error'));
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showError('Connection error: ' + error.message);
                });
        }
        
        function displayFiles(data) {
            const content = document.getElementById('file-content');
            
            if (!data.items || data.items.length === 0) {
                content.innerHTML = '<div style="padding: 20px; text-align: center;">Directory is empty</div>';
                return;
            }
            
            let html = '<table><thead><tr><th>Name</th><th>Type</th><th>Size</th><th>Modified</th></tr></thead><tbody>';
            
            data.items.forEach(item => {
                const size = item.type === 'directory' ? '-' : formatBytes(item.size || 0);
                const modified = new Date((item.modified || 0) * 1000).toLocaleString();
                const icon = item.type === 'directory' ? 'üìÅ' : 'üìÑ';
                
                html += '<tr>';
                
                if (item.type === 'directory') {
                    html += '<td><a href="#" class="file-link" onclick="navigateToDirectory(\'' + 
                            escapeHtml(item.path || '') + '\')">' + icon + ' ' + escapeHtml(item.name || '') + '</a></td>';
                } else {
                    html += '<td>' + icon + ' ' + escapeHtml(item.name || '') + '</td>';
                }
                
                html += '<td>' + escapeHtml(item.type || '') + '</td>';
                html += '<td>' + size + '</td>';
                html += '<td>' + modified + '</td>';
                html += '</tr>';
            });
            
            html += '</tbody></table>';
            content.innerHTML = html;
        }
        
        function navigateToDirectory(path) {
            if (path) {
                loadDirectory(path);
            }
        }
        
        function updateBreadcrumb(path) {
            document.getElementById('current-path').textContent = 'Current: ' + (path || '/mnt');
        }
        
        function showError(message) {
            const content = document.getElementById('file-content');
            content.innerHTML = '<div class="error">Error: ' + escapeHtml(message || 'Unknown error') + '</div>';
        }
        
        function refreshDirectory() {
            loadDirectory(currentPath);
        }
        
        function goToParent() {
            const parentPath = currentPath.replace(/\/[^\/]*$/, '') || '/mnt';
            if (parentPath !== currentPath) {
                loadDirectory(parentPath);
            }
        }
        
        function goHome() {
            loadDirectory('/mnt');
        }
        
        function formatBytes(bytes) {
            if (!bytes || bytes === 0) return '0 B';
            const k = 1024;
            const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
        }
        
        function escapeHtml(text) {
            if (!text) return '';
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
    </script>
</body>
</html>
