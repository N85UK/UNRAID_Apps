<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>AWS EUM X ‚Äî Dashboard</title>
  <link rel="stylesheet" href="/css/style.css">
  <style>
    .dashboard-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 20px;
      margin: 24px 0;
    }
    .status-tile {
      background: rgba(255,255,255,0.03);
      border: 1px solid rgba(255,255,255,0.08);
      border-radius: 8px;
      padding: 20px;
      transition: all 0.2s ease;
    }
    .status-tile:hover {
      background: rgba(255,255,255,0.05);
      border-color: rgba(255,255,255,0.15);
    }
    .tile-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 12px;
    }
    .tile-title {
      font-size: 14px;
      color: #8b949e;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
    .tile-icon {
      font-size: 20px;
    }
    .tile-value {
      font-size: 32px;
      font-weight: 700;
      color: #e6eef8;
      margin: 8px 0;
    }
    .tile-status {
      font-size: 12px;
      padding: 4px 8px;
      border-radius: 4px;
      display: inline-block;
      font-weight: 600;
    }
    .status-ok {
      background: rgba(46, 160, 67, 0.15);
      color: #3fb950;
    }
    .status-warn {
      background: rgba(187, 128, 9, 0.15);
      color: #d29922;
    }
    .status-error {
      background: rgba(248, 81, 73, 0.15);
      color: #f85149;
    }
    .tile-meta {
      font-size: 13px;
      color: #8b949e;
      margin-top: 8px;
    }
    .nav-bar {
      display: flex;
      gap: 12px;
      margin-bottom: 24px;
      border-bottom: 1px solid rgba(255,255,255,0.08);
      padding-bottom: 12px;
    }
    .nav-link {
      padding: 8px 16px;
      background: rgba(255,255,255,0.03);
      border: 1px solid rgba(255,255,255,0.08);
      border-radius: 6px;
      color: #e6eef8;
      text-decoration: none;
      font-size: 14px;
      font-weight: 500;
      transition: all 0.2s ease;
    }
    .nav-link:hover {
      background: rgba(255,255,255,0.08);
      border-color: rgba(255,255,255,0.15);
    }
    .nav-link.active {
      background: rgba(56, 139, 253, 0.15);
      border-color: #388bfd;
      color: #58a6ff;
    }
    .refresh-btn {
      margin-left: auto;
      cursor: pointer;
    }
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    .spinning {
      animation: spin 1s linear infinite;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <img src="/icons/icon.svg" alt="AWS EUM X" width="48" height="48" onerror="this.style.display='none'">
      <h1>AWS EUM X Dashboard</h1>
    </div>

    <nav class="nav-bar">
      <a href="/dashboard" class="nav-link active">Dashboard</a>
      <a href="/settings" class="nav-link">Settings</a>
      <a href="/actions" class="nav-link">Actions</a>
      <a href="/observability" class="nav-link">Observability</a>
      <button class="nav-link refresh-btn" onclick="refreshDashboard()">
        <span id="refresh-icon">üîÑ</span> Refresh
      </button>
    </nav>

    <div class="dashboard-grid" id="dashboard">
      <!-- Status tiles will be populated by JavaScript -->
    </div>

    <div style="margin-top: 32px; padding: 16px; background: rgba(255,255,255,0.02); border-radius: 8px; border: 1px solid rgba(255,255,255,0.08);">
      <h3 style="margin-top: 0; font-size: 16px; color: #8b949e;">Quick Actions</h3>
      <div style="display: flex; gap: 12px; flex-wrap: wrap;">
        <button onclick="window.location.href='/actions#test-message'" style="padding: 10px 16px;">Send Test Message</button>
        <button onclick="refreshOriginators()" style="padding: 10px 16px;">Refresh Phone Numbers</button>
        <button onclick="viewQueue()" style="padding: 10px 16px;">View Queue</button>
        <button onclick="exportLogs()" style="padding: 10px 16px;">Export Logs</button>
      </div>
    </div>

    <div style="margin-top: 24px; font-size: 12px; color: #8b949e;">
      <p>Version <%= version %> | Build <%= build %> | Uptime: <span id="uptime">--</span></p>
    </div>
  </div>

  <script>
    async function fetchDashboardData() {
      try {
        const [health, ready, queueStatus, lastSends] = await Promise.all([
          fetch('/health').then(r => r.json()),
          fetch('/ready').then(r => r.json()),
          fetch('/api/queue/status').then(r => r.json()),
          fetch('/api/last-sends').then(r => r.json())
        ]);

        return { health, ready, queueStatus, lastSends };
      } catch (err) {
        console.error('Failed to fetch dashboard data:', err);
        return null;
      }
    }

    function renderStatusTile(title, value, status, meta, icon = 'üìä') {
      const statusClass = status === 'ok' ? 'status-ok' : status === 'warn' ? 'status-warn' : 'status-error';
      const statusText = status === 'ok' ? 'Healthy' : status === 'warn' ? 'Warning' : 'Error';

      return `
        <div class="status-tile">
          <div class="tile-header">
            <div class="tile-title">${title}</div>
            <div class="tile-icon">${icon}</div>
          </div>
          <div class="tile-value">${value}</div>
          <span class="tile-status ${statusClass}">${statusText}</span>
          ${meta ? `<div class="tile-meta">${meta}</div>` : ''}
        </div>
      `;
    }

    async function refreshDashboard() {
      const icon = document.getElementById('refresh-icon');
      icon.classList.add('spinning');

      const data = await fetchDashboardData();
      if (!data) {
        icon.classList.remove('spinning');
        return;
      }

      const dashboard = document.getElementById('dashboard');
      const tiles = [];

      // AWS Connectivity
      const awsStatus = data.ready.aws.ok ? 'ok' : 'error';
      const awsValue = data.ready.aws.ok ? 'Connected' : 'Disconnected';
      const awsMeta = data.ready.aws.ok
        ? `${data.ready.aws.phoneNumbers || 0} phone numbers discovered`
        : `Reason: ${data.ready.aws.reason || 'Unknown'}`;
      tiles.push(renderStatusTile('AWS Connectivity', awsValue, awsStatus, awsMeta, '‚òÅÔ∏è'));

      // Queue Status
      const queueStatus = data.queueStatus.queueDepth > 100 ? 'warn' : 'ok';
      const queueValue = data.queueStatus.queueDepth || 0;
      const queueMeta = `Tokens: ${(data.queueStatus.tokens || 0).toFixed(2)} / ${data.queueStatus.capacity || 1}`;
      tiles.push(renderStatusTile('Queue Depth', queueValue, queueStatus, queueMeta, 'üì¨'));

      // Last Send Status
      const lastSend = data.lastSends.history && data.lastSends.history[0];
      const lastSendStatus = lastSend && lastSend.status === 'sent' ? 'ok' : lastSend && lastSend.status === 'failed' ? 'error' : 'warn';
      const lastSendValue = lastSend ? (lastSend.status === 'sent' ? 'Success' : lastSend.status === 'failed' ? 'Failed' : 'Simulated') : 'No sends yet';
      const lastSendTime = lastSend ? new Date(lastSend.at).toLocaleString() : '';
      const lastSendMeta = lastSend ? `${lastSendTime}` : 'Send a test message to get started';
      tiles.push(renderStatusTile('Last Send', lastSendValue, lastSendStatus, lastSendMeta, 'üì§'));

      // Total Sends (last 24h approximation)
      const totalSends = data.lastSends.history ? data.lastSends.history.length : 0;
      const totalStatus = totalSends > 0 ? 'ok' : 'warn';
      const totalMeta = totalSends > 0 ? 'Recent activity (last 50 tracked)' : 'No activity recorded';
      tiles.push(renderStatusTile('Total Sends', totalSends, totalStatus, totalMeta, 'üìä'));

      // System Health
      const uptimeSeconds = Math.floor(data.health.uptime || 0);
      const uptimeMins = Math.floor(uptimeSeconds / 60);
      const uptimeHours = Math.floor(uptimeMins / 60);
      const uptimeDays = Math.floor(uptimeHours / 24);
      const uptimeDisplay = uptimeDays > 0 ? `${uptimeDays}d` : uptimeHours > 0 ? `${uptimeHours}h` : `${uptimeMins}m`;
      const systemMeta = `Version ${data.health.version || 'unknown'}`;
      tiles.push(renderStatusTile('System Uptime', uptimeDisplay, 'ok', systemMeta, '‚ö°'));

      // Errors (placeholder)
      const errorCount = data.lastSends.history ? data.lastSends.history.filter(s => s.status === 'failed').length : 0;
      const errorStatus = errorCount > 5 ? 'error' : errorCount > 0 ? 'warn' : 'ok';
      const errorMeta = errorCount > 0 ? 'Check observability page for details' : 'No errors detected';
      tiles.push(renderStatusTile('Failed Sends', errorCount, errorStatus, errorMeta, '‚ö†Ô∏è'));

      dashboard.innerHTML = tiles.join('');

      // Update uptime display
      document.getElementById('uptime').textContent = uptimeDisplay;

      icon.classList.remove('spinning');
    }

    async function refreshOriginators() {
      try {
        const res = await fetch('/api/refresh-originators', { method: 'POST' });
        const json = await res.json();
        alert(`Refreshed! Found ${json.count || 0} phone numbers/sender IDs.`);
        refreshDashboard();
      } catch (err) {
        alert('Error refreshing: ' + err.message);
      }
    }

    async function viewQueue() {
      try {
        const res = await fetch('/api/queue/status');
        const json = await res.json();
        alert(`Queue Status:\nDepth: ${json.queueDepth}\nTokens: ${json.tokens.toFixed(2)}\nCapacity: ${json.capacity}`);
      } catch (err) {
        alert('Error: ' + err.message);
      }
    }

    async function exportLogs() {
      window.location.href = '/api/config/export';
    }

    // Initial load
    refreshDashboard();

    // Auto-refresh every 30 seconds
    setInterval(refreshDashboard, 30000);
  </script>
</body>
</html>
