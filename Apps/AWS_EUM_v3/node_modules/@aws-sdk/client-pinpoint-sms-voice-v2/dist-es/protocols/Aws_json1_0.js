import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { AccessDeniedException, ConflictException, InternalServerException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
import { PinpointSMSVoiceV2ServiceException as __BaseException } from "../models/PinpointSMSVoiceV2ServiceException";
export const se_AssociateOriginationIdentityCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateOriginationIdentity");
    let body;
    body = JSON.stringify(se_AssociateOriginationIdentityRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_AssociateProtectConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateProtectConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateConfigurationSetCommand = async (input, context) => {
    const headers = sharedHeaders("CreateConfigurationSet");
    let body;
    body = JSON.stringify(se_CreateConfigurationSetRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateEventDestinationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEventDestination");
    let body;
    body = JSON.stringify(se_CreateEventDestinationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateOptOutListCommand = async (input, context) => {
    const headers = sharedHeaders("CreateOptOutList");
    let body;
    body = JSON.stringify(se_CreateOptOutListRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreatePoolCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePool");
    let body;
    body = JSON.stringify(se_CreatePoolRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateProtectConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateProtectConfiguration");
    let body;
    body = JSON.stringify(se_CreateProtectConfigurationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateRegistrationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRegistration");
    let body;
    body = JSON.stringify(se_CreateRegistrationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateRegistrationAssociationCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRegistrationAssociation");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateRegistrationAttachmentCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRegistrationAttachment");
    let body;
    body = JSON.stringify(se_CreateRegistrationAttachmentRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateRegistrationVersionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateRegistrationVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateVerifiedDestinationNumberCommand = async (input, context) => {
    const headers = sharedHeaders("CreateVerifiedDestinationNumber");
    let body;
    body = JSON.stringify(se_CreateVerifiedDestinationNumberRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteAccountDefaultProtectConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAccountDefaultProtectConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteConfigurationSetCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteConfigurationSet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDefaultMessageTypeCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDefaultMessageType");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteDefaultSenderIdCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDefaultSenderId");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteEventDestinationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEventDestination");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteKeywordCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteKeyword");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteMediaMessageSpendLimitOverrideCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteMediaMessageSpendLimitOverride");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteOptedOutNumberCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteOptedOutNumber");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteOptOutListCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteOptOutList");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeletePoolCommand = async (input, context) => {
    const headers = sharedHeaders("DeletePool");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteProtectConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteProtectConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteProtectConfigurationRuleSetNumberOverrideCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteProtectConfigurationRuleSetNumberOverride");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteRegistrationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRegistration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteRegistrationAttachmentCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRegistrationAttachment");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteRegistrationFieldValueCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteRegistrationFieldValue");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResourcePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteTextMessageSpendLimitOverrideCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTextMessageSpendLimitOverride");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteVerifiedDestinationNumberCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteVerifiedDestinationNumber");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteVoiceMessageSpendLimitOverrideCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteVoiceMessageSpendLimitOverride");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAccountAttributesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAccountAttributes");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeAccountLimitsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAccountLimits");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeConfigurationSetsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeConfigurationSets");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeKeywordsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeKeywords");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeOptedOutNumbersCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeOptedOutNumbers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeOptOutListsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeOptOutLists");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribePhoneNumbersCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePhoneNumbers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribePoolsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePools");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeProtectConfigurationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeProtectConfigurations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeRegistrationAttachmentsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRegistrationAttachments");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeRegistrationFieldDefinitionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRegistrationFieldDefinitions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeRegistrationFieldValuesCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRegistrationFieldValues");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeRegistrationsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRegistrations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeRegistrationSectionDefinitionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRegistrationSectionDefinitions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeRegistrationTypeDefinitionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRegistrationTypeDefinitions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeRegistrationVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRegistrationVersions");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSenderIdsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeSenderIds");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeSpendLimitsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeSpendLimits");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DescribeVerifiedDestinationNumbersCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeVerifiedDestinationNumbers");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateOriginationIdentityCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateOriginationIdentity");
    let body;
    body = JSON.stringify(se_DisassociateOriginationIdentityRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DisassociateProtectConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateProtectConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DiscardRegistrationVersionCommand = async (input, context) => {
    const headers = sharedHeaders("DiscardRegistrationVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetProtectConfigurationCountryRuleSetCommand = async (input, context) => {
    const headers = sharedHeaders("GetProtectConfigurationCountryRuleSet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetResourcePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListPoolOriginationIdentitiesCommand = async (input, context) => {
    const headers = sharedHeaders("ListPoolOriginationIdentities");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListProtectConfigurationRuleSetNumberOverridesCommand = async (input, context) => {
    const headers = sharedHeaders("ListProtectConfigurationRuleSetNumberOverrides");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListRegistrationAssociationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListRegistrationAssociations");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutKeywordCommand = async (input, context) => {
    const headers = sharedHeaders("PutKeyword");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutMessageFeedbackCommand = async (input, context) => {
    const headers = sharedHeaders("PutMessageFeedback");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutOptedOutNumberCommand = async (input, context) => {
    const headers = sharedHeaders("PutOptedOutNumber");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutProtectConfigurationRuleSetNumberOverrideCommand = async (input, context) => {
    const headers = sharedHeaders("PutProtectConfigurationRuleSetNumberOverride");
    let body;
    body = JSON.stringify(se_PutProtectConfigurationRuleSetNumberOverrideRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutRegistrationFieldValueCommand = async (input, context) => {
    const headers = sharedHeaders("PutRegistrationFieldValue");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_PutResourcePolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutResourcePolicy");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ReleasePhoneNumberCommand = async (input, context) => {
    const headers = sharedHeaders("ReleasePhoneNumber");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ReleaseSenderIdCommand = async (input, context) => {
    const headers = sharedHeaders("ReleaseSenderId");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RequestPhoneNumberCommand = async (input, context) => {
    const headers = sharedHeaders("RequestPhoneNumber");
    let body;
    body = JSON.stringify(se_RequestPhoneNumberRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_RequestSenderIdCommand = async (input, context) => {
    const headers = sharedHeaders("RequestSenderId");
    let body;
    body = JSON.stringify(se_RequestSenderIdRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SendDestinationNumberVerificationCodeCommand = async (input, context) => {
    const headers = sharedHeaders("SendDestinationNumberVerificationCode");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SendMediaMessageCommand = async (input, context) => {
    const headers = sharedHeaders("SendMediaMessage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SendTextMessageCommand = async (input, context) => {
    const headers = sharedHeaders("SendTextMessage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SendVoiceMessageCommand = async (input, context) => {
    const headers = sharedHeaders("SendVoiceMessage");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SetAccountDefaultProtectConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("SetAccountDefaultProtectConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SetDefaultMessageFeedbackEnabledCommand = async (input, context) => {
    const headers = sharedHeaders("SetDefaultMessageFeedbackEnabled");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SetDefaultMessageTypeCommand = async (input, context) => {
    const headers = sharedHeaders("SetDefaultMessageType");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SetDefaultSenderIdCommand = async (input, context) => {
    const headers = sharedHeaders("SetDefaultSenderId");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SetMediaMessageSpendLimitOverrideCommand = async (input, context) => {
    const headers = sharedHeaders("SetMediaMessageSpendLimitOverride");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SetTextMessageSpendLimitOverrideCommand = async (input, context) => {
    const headers = sharedHeaders("SetTextMessageSpendLimitOverride");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SetVoiceMessageSpendLimitOverrideCommand = async (input, context) => {
    const headers = sharedHeaders("SetVoiceMessageSpendLimitOverride");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_SubmitRegistrationVersionCommand = async (input, context) => {
    const headers = sharedHeaders("SubmitRegistrationVersion");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateEventDestinationCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateEventDestination");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdatePhoneNumberCommand = async (input, context) => {
    const headers = sharedHeaders("UpdatePhoneNumber");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdatePoolCommand = async (input, context) => {
    const headers = sharedHeaders("UpdatePool");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateProtectConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateProtectConfiguration");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateProtectConfigurationCountryRuleSetCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateProtectConfigurationCountryRuleSet");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateSenderIdCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateSenderId");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_VerifyDestinationNumberCommand = async (input, context) => {
    const headers = sharedHeaders("VerifyDestinationNumber");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_AssociateOriginationIdentityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_AssociateProtectConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateConfigurationSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateConfigurationSetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateEventDestinationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateOptOutListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateOptOutListResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreatePoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreatePoolResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateProtectConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateProtectConfigurationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateRegistrationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateRegistrationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateRegistrationAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateRegistrationAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateRegistrationAttachmentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateRegistrationVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateRegistrationVersionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateVerifiedDestinationNumberCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateVerifiedDestinationNumberResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteAccountDefaultProtectConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteConfigurationSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteConfigurationSetResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteDefaultMessageTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteDefaultSenderIdCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteEventDestinationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteKeywordCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteMediaMessageSpendLimitOverrideCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteOptedOutNumberCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteOptedOutNumberResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteOptOutListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteOptOutListResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeletePoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeletePoolResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteProtectConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteProtectConfigurationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteProtectConfigurationRuleSetNumberOverrideCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteProtectConfigurationRuleSetNumberOverrideResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteRegistrationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteRegistrationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteRegistrationAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteRegistrationAttachmentResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteRegistrationFieldValueCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteResourcePolicyResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteTextMessageSpendLimitOverrideCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteVerifiedDestinationNumberCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteVerifiedDestinationNumberResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteVoiceMessageSpendLimitOverrideCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeAccountAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeAccountLimitsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeConfigurationSetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeConfigurationSetsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeKeywordsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeOptedOutNumbersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeOptedOutNumbersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeOptOutListsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeOptOutListsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribePhoneNumbersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribePhoneNumbersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribePoolsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribePoolsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeProtectConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeProtectConfigurationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeRegistrationAttachmentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeRegistrationAttachmentsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeRegistrationFieldDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeRegistrationFieldValuesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeRegistrationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeRegistrationsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeRegistrationSectionDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeRegistrationTypeDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeRegistrationVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeRegistrationVersionsResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeSenderIdsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeSpendLimitsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DescribeVerifiedDestinationNumbersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DescribeVerifiedDestinationNumbersResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DisassociateOriginationIdentityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DisassociateProtectConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DiscardRegistrationVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DiscardRegistrationVersionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetProtectConfigurationCountryRuleSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetResourcePolicyResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListPoolOriginationIdentitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListProtectConfigurationRuleSetNumberOverridesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListProtectConfigurationRuleSetNumberOverridesResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListRegistrationAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutKeywordCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutMessageFeedbackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutOptedOutNumberCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutOptedOutNumberResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutProtectConfigurationRuleSetNumberOverrideCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutProtectConfigurationRuleSetNumberOverrideResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutRegistrationFieldValueCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_PutResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_PutResourcePolicyResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ReleasePhoneNumberCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ReleasePhoneNumberResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ReleaseSenderIdCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RequestPhoneNumberCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_RequestPhoneNumberResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_RequestSenderIdCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SendDestinationNumberVerificationCodeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SendMediaMessageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SendTextMessageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SendVoiceMessageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SetAccountDefaultProtectConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SetDefaultMessageFeedbackEnabledCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SetDefaultMessageTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SetDefaultSenderIdCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SetMediaMessageSpendLimitOverrideCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SetTextMessageSpendLimitOverrideCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SetVoiceMessageSpendLimitOverrideCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_SubmitRegistrationVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_SubmitRegistrationVersionResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateEventDestinationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdatePhoneNumberCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdatePhoneNumberResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdatePoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdatePoolResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateProtectConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateProtectConfigurationResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateProtectConfigurationCountryRuleSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateSenderIdCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_VerifyDestinationNumberCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_VerifyDestinationNumberResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.pinpointsmsvoicev2#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.pinpointsmsvoicev2#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.pinpointsmsvoicev2#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.pinpointsmsvoicev2#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.pinpointsmsvoicev2#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.pinpointsmsvoicev2#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.pinpointsmsvoicev2#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_AssociateOriginationIdentityRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        IsoCountryCode: [],
        OriginationIdentity: [],
        PoolId: [],
    });
};
const se_CreateConfigurationSetRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        ConfigurationSetName: [],
        Tags: _json,
    });
};
const se_CreateEventDestinationRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        CloudWatchLogsDestination: _json,
        ConfigurationSetName: [],
        EventDestinationName: [],
        KinesisFirehoseDestination: _json,
        MatchingEventTypes: _json,
        SnsDestination: _json,
    });
};
const se_CreateOptOutListRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        OptOutListName: [],
        Tags: _json,
    });
};
const se_CreatePoolRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DeletionProtectionEnabled: [],
        IsoCountryCode: [],
        MessageType: [],
        OriginationIdentity: [],
        Tags: _json,
    });
};
const se_CreateProtectConfigurationRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DeletionProtectionEnabled: [],
        Tags: _json,
    });
};
const se_CreateRegistrationAttachmentRequest = (input, context) => {
    return take(input, {
        AttachmentBody: context.base64Encoder,
        AttachmentUrl: [],
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Tags: _json,
    });
};
const se_CreateRegistrationRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        RegistrationType: [],
        Tags: _json,
    });
};
const se_CreateVerifiedDestinationNumberRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DestinationPhoneNumber: [],
        Tags: _json,
    });
};
const se_DisassociateOriginationIdentityRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        IsoCountryCode: [],
        OriginationIdentity: [],
        PoolId: [],
    });
};
const se_PutProtectConfigurationRuleSetNumberOverrideRequest = (input, context) => {
    return take(input, {
        Action: [],
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DestinationPhoneNumber: [],
        ExpirationTimestamp: (_) => _.getTime() / 1_000,
        ProtectConfigurationId: [],
    });
};
const se_RequestPhoneNumberRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DeletionProtectionEnabled: [],
        InternationalSendingEnabled: [],
        IsoCountryCode: [],
        MessageType: [],
        NumberCapabilities: _json,
        NumberType: [],
        OptOutListName: [],
        PoolId: [],
        RegistrationId: [],
        Tags: _json,
    });
};
const se_RequestSenderIdRequest = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DeletionProtectionEnabled: [],
        IsoCountryCode: [],
        MessageTypes: _json,
        SenderId: [],
        Tags: _json,
    });
};
const de_ConfigurationSetInformation = (output, context) => {
    return take(output, {
        ConfigurationSetArn: __expectString,
        ConfigurationSetName: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DefaultMessageFeedbackEnabled: __expectBoolean,
        DefaultMessageType: __expectString,
        DefaultSenderId: __expectString,
        EventDestinations: _json,
        ProtectConfigurationId: __expectString,
    });
};
const de_ConfigurationSetInformationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConfigurationSetInformation(entry, context);
    });
    return retVal;
};
const de_CreateConfigurationSetResult = (output, context) => {
    return take(output, {
        ConfigurationSetArn: __expectString,
        ConfigurationSetName: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Tags: _json,
    });
};
const de_CreateOptOutListResult = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        OptOutListArn: __expectString,
        OptOutListName: __expectString,
        Tags: _json,
    });
};
const de_CreatePoolResult = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeletionProtectionEnabled: __expectBoolean,
        MessageType: __expectString,
        OptOutListName: __expectString,
        PoolArn: __expectString,
        PoolId: __expectString,
        SelfManagedOptOutsEnabled: __expectBoolean,
        SharedRoutesEnabled: __expectBoolean,
        Status: __expectString,
        Tags: _json,
        TwoWayChannelArn: __expectString,
        TwoWayChannelRole: __expectString,
        TwoWayEnabled: __expectBoolean,
    });
};
const de_CreateProtectConfigurationResult = (output, context) => {
    return take(output, {
        AccountDefault: __expectBoolean,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeletionProtectionEnabled: __expectBoolean,
        ProtectConfigurationArn: __expectString,
        ProtectConfigurationId: __expectString,
        Tags: _json,
    });
};
const de_CreateRegistrationAttachmentResult = (output, context) => {
    return take(output, {
        AttachmentStatus: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RegistrationAttachmentArn: __expectString,
        RegistrationAttachmentId: __expectString,
        Tags: _json,
    });
};
const de_CreateRegistrationResult = (output, context) => {
    return take(output, {
        AdditionalAttributes: _json,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CurrentVersionNumber: __expectLong,
        RegistrationArn: __expectString,
        RegistrationId: __expectString,
        RegistrationStatus: __expectString,
        RegistrationType: __expectString,
        Tags: _json,
    });
};
const de_CreateRegistrationVersionResult = (output, context) => {
    return take(output, {
        RegistrationArn: __expectString,
        RegistrationId: __expectString,
        RegistrationVersionStatus: __expectString,
        RegistrationVersionStatusHistory: (_) => de_RegistrationVersionStatusHistory(_, context),
        VersionNumber: __expectLong,
    });
};
const de_CreateVerifiedDestinationNumberResult = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DestinationPhoneNumber: __expectString,
        Status: __expectString,
        Tags: _json,
        VerifiedDestinationNumberArn: __expectString,
        VerifiedDestinationNumberId: __expectString,
    });
};
const de_DeleteConfigurationSetResult = (output, context) => {
    return take(output, {
        ConfigurationSetArn: __expectString,
        ConfigurationSetName: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DefaultMessageFeedbackEnabled: __expectBoolean,
        DefaultMessageType: __expectString,
        DefaultSenderId: __expectString,
        EventDestinations: _json,
    });
};
const de_DeleteOptedOutNumberResult = (output, context) => {
    return take(output, {
        EndUserOptedOut: __expectBoolean,
        OptOutListArn: __expectString,
        OptOutListName: __expectString,
        OptedOutNumber: __expectString,
        OptedOutTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_DeleteOptOutListResult = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        OptOutListArn: __expectString,
        OptOutListName: __expectString,
    });
};
const de_DeletePoolResult = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        MessageType: __expectString,
        OptOutListName: __expectString,
        PoolArn: __expectString,
        PoolId: __expectString,
        SelfManagedOptOutsEnabled: __expectBoolean,
        SharedRoutesEnabled: __expectBoolean,
        Status: __expectString,
        TwoWayChannelArn: __expectString,
        TwoWayChannelRole: __expectString,
        TwoWayEnabled: __expectBoolean,
    });
};
const de_DeleteProtectConfigurationResult = (output, context) => {
    return take(output, {
        AccountDefault: __expectBoolean,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeletionProtectionEnabled: __expectBoolean,
        ProtectConfigurationArn: __expectString,
        ProtectConfigurationId: __expectString,
    });
};
const de_DeleteProtectConfigurationRuleSetNumberOverrideResult = (output, context) => {
    return take(output, {
        Action: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DestinationPhoneNumber: __expectString,
        ExpirationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        IsoCountryCode: __expectString,
        ProtectConfigurationArn: __expectString,
        ProtectConfigurationId: __expectString,
    });
};
const de_DeleteRegistrationAttachmentResult = (output, context) => {
    return take(output, {
        AttachmentStatus: __expectString,
        AttachmentUploadErrorReason: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RegistrationAttachmentArn: __expectString,
        RegistrationAttachmentId: __expectString,
    });
};
const de_DeleteRegistrationResult = (output, context) => {
    return take(output, {
        AdditionalAttributes: _json,
        ApprovedVersionNumber: __expectLong,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CurrentVersionNumber: __expectLong,
        LatestDeniedVersionNumber: __expectLong,
        RegistrationArn: __expectString,
        RegistrationId: __expectString,
        RegistrationStatus: __expectString,
        RegistrationType: __expectString,
    });
};
const de_DeleteResourcePolicyResult = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Policy: __expectString,
        ResourceArn: __expectString,
    });
};
const de_DeleteVerifiedDestinationNumberResult = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DestinationPhoneNumber: __expectString,
        VerifiedDestinationNumberArn: __expectString,
        VerifiedDestinationNumberId: __expectString,
    });
};
const de_DescribeConfigurationSetsResult = (output, context) => {
    return take(output, {
        ConfigurationSets: (_) => de_ConfigurationSetInformationList(_, context),
        NextToken: __expectString,
    });
};
const de_DescribeOptedOutNumbersResult = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        OptOutListArn: __expectString,
        OptOutListName: __expectString,
        OptedOutNumbers: (_) => de_OptedOutNumberInformationList(_, context),
    });
};
const de_DescribeOptOutListsResult = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        OptOutLists: (_) => de_OptOutListInformationList(_, context),
    });
};
const de_DescribePhoneNumbersResult = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        PhoneNumbers: (_) => de_PhoneNumberInformationList(_, context),
    });
};
const de_DescribePoolsResult = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Pools: (_) => de_PoolInformationList(_, context),
    });
};
const de_DescribeProtectConfigurationsResult = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        ProtectConfigurations: (_) => de_ProtectConfigurationInformationList(_, context),
    });
};
const de_DescribeRegistrationAttachmentsResult = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        RegistrationAttachments: (_) => de_RegistrationAttachmentsInformationList(_, context),
    });
};
const de_DescribeRegistrationsResult = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        Registrations: (_) => de_RegistrationInformationList(_, context),
    });
};
const de_DescribeRegistrationVersionsResult = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        RegistrationArn: __expectString,
        RegistrationId: __expectString,
        RegistrationVersions: (_) => de_RegistrationVersionInformationList(_, context),
    });
};
const de_DescribeVerifiedDestinationNumbersResult = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        VerifiedDestinationNumbers: (_) => de_VerifiedDestinationNumberInformationList(_, context),
    });
};
const de_DiscardRegistrationVersionResult = (output, context) => {
    return take(output, {
        RegistrationArn: __expectString,
        RegistrationId: __expectString,
        RegistrationVersionStatus: __expectString,
        RegistrationVersionStatusHistory: (_) => de_RegistrationVersionStatusHistory(_, context),
        VersionNumber: __expectLong,
    });
};
const de_GetResourcePolicyResult = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Policy: __expectString,
        ResourceArn: __expectString,
    });
};
const de_ListProtectConfigurationRuleSetNumberOverridesResult = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        ProtectConfigurationArn: __expectString,
        ProtectConfigurationId: __expectString,
        RuleSetNumberOverrides: (_) => de_ProtectConfigurationRuleSetNumberOverrideList(_, context),
    });
};
const de_OptedOutNumberInformation = (output, context) => {
    return take(output, {
        EndUserOptedOut: __expectBoolean,
        OptedOutNumber: __expectString,
        OptedOutTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_OptedOutNumberInformationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OptedOutNumberInformation(entry, context);
    });
    return retVal;
};
const de_OptOutListInformation = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        OptOutListArn: __expectString,
        OptOutListName: __expectString,
    });
};
const de_OptOutListInformationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OptOutListInformation(entry, context);
    });
    return retVal;
};
const de_PhoneNumberInformation = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeletionProtectionEnabled: __expectBoolean,
        InternationalSendingEnabled: __expectBoolean,
        IsoCountryCode: __expectString,
        MessageType: __expectString,
        MonthlyLeasingPrice: __expectString,
        NumberCapabilities: _json,
        NumberType: __expectString,
        OptOutListName: __expectString,
        PhoneNumber: __expectString,
        PhoneNumberArn: __expectString,
        PhoneNumberId: __expectString,
        PoolId: __expectString,
        RegistrationId: __expectString,
        SelfManagedOptOutsEnabled: __expectBoolean,
        Status: __expectString,
        TwoWayChannelArn: __expectString,
        TwoWayChannelRole: __expectString,
        TwoWayEnabled: __expectBoolean,
    });
};
const de_PhoneNumberInformationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PhoneNumberInformation(entry, context);
    });
    return retVal;
};
const de_PoolInformation = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeletionProtectionEnabled: __expectBoolean,
        MessageType: __expectString,
        OptOutListName: __expectString,
        PoolArn: __expectString,
        PoolId: __expectString,
        SelfManagedOptOutsEnabled: __expectBoolean,
        SharedRoutesEnabled: __expectBoolean,
        Status: __expectString,
        TwoWayChannelArn: __expectString,
        TwoWayChannelRole: __expectString,
        TwoWayEnabled: __expectBoolean,
    });
};
const de_PoolInformationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PoolInformation(entry, context);
    });
    return retVal;
};
const de_ProtectConfigurationInformation = (output, context) => {
    return take(output, {
        AccountDefault: __expectBoolean,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeletionProtectionEnabled: __expectBoolean,
        ProtectConfigurationArn: __expectString,
        ProtectConfigurationId: __expectString,
    });
};
const de_ProtectConfigurationInformationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProtectConfigurationInformation(entry, context);
    });
    return retVal;
};
const de_ProtectConfigurationRuleSetNumberOverride = (output, context) => {
    return take(output, {
        Action: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DestinationPhoneNumber: __expectString,
        ExpirationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        IsoCountryCode: __expectString,
    });
};
const de_ProtectConfigurationRuleSetNumberOverrideList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProtectConfigurationRuleSetNumberOverride(entry, context);
    });
    return retVal;
};
const de_PutOptedOutNumberResult = (output, context) => {
    return take(output, {
        EndUserOptedOut: __expectBoolean,
        OptOutListArn: __expectString,
        OptOutListName: __expectString,
        OptedOutNumber: __expectString,
        OptedOutTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_PutProtectConfigurationRuleSetNumberOverrideResult = (output, context) => {
    return take(output, {
        Action: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DestinationPhoneNumber: __expectString,
        ExpirationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        IsoCountryCode: __expectString,
        ProtectConfigurationArn: __expectString,
        ProtectConfigurationId: __expectString,
    });
};
const de_PutResourcePolicyResult = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        Policy: __expectString,
        ResourceArn: __expectString,
    });
};
const de_RegistrationAttachmentsInformation = (output, context) => {
    return take(output, {
        AttachmentStatus: __expectString,
        AttachmentUploadErrorReason: __expectString,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RegistrationAttachmentArn: __expectString,
        RegistrationAttachmentId: __expectString,
    });
};
const de_RegistrationAttachmentsInformationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RegistrationAttachmentsInformation(entry, context);
    });
    return retVal;
};
const de_RegistrationInformation = (output, context) => {
    return take(output, {
        AdditionalAttributes: _json,
        ApprovedVersionNumber: __expectLong,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        CurrentVersionNumber: __expectLong,
        LatestDeniedVersionNumber: __expectLong,
        RegistrationArn: __expectString,
        RegistrationId: __expectString,
        RegistrationStatus: __expectString,
        RegistrationType: __expectString,
    });
};
const de_RegistrationInformationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RegistrationInformation(entry, context);
    });
    return retVal;
};
const de_RegistrationVersionInformation = (output, context) => {
    return take(output, {
        DeniedReasons: _json,
        RegistrationVersionStatus: __expectString,
        RegistrationVersionStatusHistory: (_) => de_RegistrationVersionStatusHistory(_, context),
        VersionNumber: __expectLong,
    });
};
const de_RegistrationVersionInformationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RegistrationVersionInformation(entry, context);
    });
    return retVal;
};
const de_RegistrationVersionStatusHistory = (output, context) => {
    return take(output, {
        ApprovedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ArchivedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeniedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DiscardedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DraftTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RequiresAuthenticationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        ReviewingTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        RevokedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        SubmittedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
    });
};
const de_ReleasePhoneNumberResult = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        IsoCountryCode: __expectString,
        MessageType: __expectString,
        MonthlyLeasingPrice: __expectString,
        NumberCapabilities: _json,
        NumberType: __expectString,
        OptOutListName: __expectString,
        PhoneNumber: __expectString,
        PhoneNumberArn: __expectString,
        PhoneNumberId: __expectString,
        RegistrationId: __expectString,
        SelfManagedOptOutsEnabled: __expectBoolean,
        Status: __expectString,
        TwoWayChannelArn: __expectString,
        TwoWayChannelRole: __expectString,
        TwoWayEnabled: __expectBoolean,
    });
};
const de_RequestPhoneNumberResult = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeletionProtectionEnabled: __expectBoolean,
        InternationalSendingEnabled: __expectBoolean,
        IsoCountryCode: __expectString,
        MessageType: __expectString,
        MonthlyLeasingPrice: __expectString,
        NumberCapabilities: _json,
        NumberType: __expectString,
        OptOutListName: __expectString,
        PhoneNumber: __expectString,
        PhoneNumberArn: __expectString,
        PhoneNumberId: __expectString,
        PoolId: __expectString,
        RegistrationId: __expectString,
        SelfManagedOptOutsEnabled: __expectBoolean,
        Status: __expectString,
        Tags: _json,
        TwoWayChannelArn: __expectString,
        TwoWayChannelRole: __expectString,
        TwoWayEnabled: __expectBoolean,
    });
};
const de_SubmitRegistrationVersionResult = (output, context) => {
    return take(output, {
        RegistrationArn: __expectString,
        RegistrationId: __expectString,
        RegistrationVersionStatus: __expectString,
        RegistrationVersionStatusHistory: (_) => de_RegistrationVersionStatusHistory(_, context),
        VersionNumber: __expectLong,
    });
};
const de_UpdatePhoneNumberResult = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeletionProtectionEnabled: __expectBoolean,
        InternationalSendingEnabled: __expectBoolean,
        IsoCountryCode: __expectString,
        MessageType: __expectString,
        MonthlyLeasingPrice: __expectString,
        NumberCapabilities: _json,
        NumberType: __expectString,
        OptOutListName: __expectString,
        PhoneNumber: __expectString,
        PhoneNumberArn: __expectString,
        PhoneNumberId: __expectString,
        RegistrationId: __expectString,
        SelfManagedOptOutsEnabled: __expectBoolean,
        Status: __expectString,
        TwoWayChannelArn: __expectString,
        TwoWayChannelRole: __expectString,
        TwoWayEnabled: __expectBoolean,
    });
};
const de_UpdatePoolResult = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeletionProtectionEnabled: __expectBoolean,
        MessageType: __expectString,
        OptOutListName: __expectString,
        PoolArn: __expectString,
        PoolId: __expectString,
        SelfManagedOptOutsEnabled: __expectBoolean,
        SharedRoutesEnabled: __expectBoolean,
        Status: __expectString,
        TwoWayChannelArn: __expectString,
        TwoWayChannelRole: __expectString,
        TwoWayEnabled: __expectBoolean,
    });
};
const de_UpdateProtectConfigurationResult = (output, context) => {
    return take(output, {
        AccountDefault: __expectBoolean,
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DeletionProtectionEnabled: __expectBoolean,
        ProtectConfigurationArn: __expectString,
        ProtectConfigurationId: __expectString,
    });
};
const de_VerifiedDestinationNumberInformation = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DestinationPhoneNumber: __expectString,
        Status: __expectString,
        VerifiedDestinationNumberArn: __expectString,
        VerifiedDestinationNumberId: __expectString,
    });
};
const de_VerifiedDestinationNumberInformationList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VerifiedDestinationNumberInformation(entry, context);
    });
    return retVal;
};
const de_VerifyDestinationNumberResult = (output, context) => {
    return take(output, {
        CreatedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        DestinationPhoneNumber: __expectString,
        Status: __expectString,
        VerifiedDestinationNumberArn: __expectString,
        VerifiedDestinationNumberId: __expectString,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": `PinpointSMSVoiceV2.${operation}`,
    };
}
