version: '3.8'

services:
  mariadb:
    image: lscr.io/linuxserver/mariadb:latest
    container_name: aws-eum-mariadb-db
    restart: unless-stopped
    environment:
      PUID: 1000
      PGID: 1000
      TZ: Etc/UTC
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: aws_eum
      MYSQL_USER: aws_eum
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mariadb_data:/config
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "3306:3306"
    networks:
      - aws-eum-network
    healthcheck:
      test: ["CMD", "mariadb-admin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      timeout: 20s
      retries: 10

  aws-eum-app:
    image: ghcr.io/n85uk/aws-eum-mariadb:latest
    # For development, use: build: .
    container_name: aws-eum-mariadb-app
    restart: unless-stopped
    depends_on:
      mariadb:
        condition: service_healthy
    environment:
      # AWS Configuration
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      
      # Database Configuration
      DB_HOST: mariadb
      DB_PORT: 3306
      DB_NAME: aws_eum
      DB_USER: aws_eum
      DB_PASSWORD: ${MYSQL_PASSWORD}
      
      # Application Configuration
      PORT: 3000
      NODE_ENV: production
      
      # Security Configuration
      JWT_SECRET: ${JWT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      
      # Admin User (created on first run)
      ADMIN_USERNAME: ${ADMIN_USERNAME:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@example.com}
      
      # Feature Flags
      ENABLE_REGISTRATION: ${ENABLE_REGISTRATION:-false}
      ENABLE_API_KEYS: ${ENABLE_API_KEYS:-true}
      MAX_MESSAGE_LENGTH: ${MAX_MESSAGE_LENGTH:-1600}
      
    ports:
      - "3000:3000"
    networks:
      - aws-eum-network
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: aws-eum-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - aws-eum-network
    ports:
      - "6379:6379"

  # Optional: Watchtower for automatic updates
  watchtower:
    image: containrrr/watchtower
    container_name: aws-eum-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      WATCHTOWER_CLEANUP: true
      WATCHTOWER_POLL_INTERVAL: 3600
      WATCHTOWER_INCLUDE_STOPPED: true
      WATCHTOWER_REVIVE_STOPPED: false
    command: --interval 3600 --cleanup aws-eum-mariadb-app

networks:
  aws-eum-network:
    driver: bridge

volumes:
  mariadb_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local
  app_logs:
    driver: local
