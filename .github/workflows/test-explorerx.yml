name: Test ExplorerX Plugin

on:
  push:
    branches: [ main ]
    paths: 
      - 'ExplorerX_Plugin/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'ExplorerX_Plugin/**'

jobs:
  validate-plugin:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate XML syntax
        run: |
          # Install xmllint
          sudo apt-get update
          sudo apt-get install -y libxml2-utils
          
          # Validate plugin XML syntax
          echo "Validating explorerx.plg XML syntax..."
          xmllint --noout ExplorerX_Plugin/explorerx.plg
          echo "‚úÖ XML syntax is valid"

      - name: Check plugin structure
        run: |
          # Check required files exist
          echo "Checking plugin structure..."
          
          if [ ! -f "ExplorerX_Plugin/explorerx.plg" ]; then
            echo "‚ùå Missing explorerx.plg"
            exit 1
          fi
          
          echo "‚úÖ Plugin manifest exists"
          
          # Check if packages directory exists
          if [ ! -d "ExplorerX_Plugin/packages" ]; then
            echo "‚ö†Ô∏è Packages directory not found - this is expected for development"
          else
            echo "‚úÖ Packages directory exists"
            ls -la ExplorerX_Plugin/packages/
          fi

      - name: Validate plugin metadata
        run: |
          echo "Validating plugin metadata..."
          
          # Extract metadata from plugin using proper XML entity parsing
          VERSION=$(grep '<!ENTITY version ' ExplorerX_Plugin/explorerx.plg | sed 's/.*"\([^"]*\)".*/\1/' | tr -d '[:space:]')
          AUTHOR=$(grep '<!ENTITY author ' ExplorerX_Plugin/explorerx.plg | sed 's/.*"\([^"]*\)".*/\1/' | tr -d '[:space:]')
          NAME=$(grep '<!ENTITY name ' ExplorerX_Plugin/explorerx.plg | sed 's/.*"\([^"]*\)".*/\1/' | tr -d '[:space:]')
          
          echo "Debug - Raw lines:"
          grep '<!ENTITY version ' ExplorerX_Plugin/explorerx.plg || echo "Version line not found"
          grep '<!ENTITY author ' ExplorerX_Plugin/explorerx.plg || echo "Author line not found"
          grep '<!ENTITY name ' ExplorerX_Plugin/explorerx.plg || echo "Name line not found"
          
          echo "Extracted values:"
          echo "Plugin Name: '$NAME'"
          echo "Version: '$VERSION'"
          echo "Author: '$AUTHOR'"
          
          # Validate version format (date-based: YYYY.MM.DD.#### - new format)
          if echo "$VERSION" | grep -qE '^[0-9]{4}\.[0-9]{2}\.[0-9]{2}\.[0-9]{4}$'; then
            echo "‚úÖ Version format is valid (YYYY.MM.DD.#### format)"
          else
            echo "‚ùå Invalid version format: $VERSION (expected: YYYY.MM.DD.####)"
            echo "Current version: '$VERSION'"
            echo "Length: ${#VERSION}"
            echo "Version bytes:" | hexdump -C <<< "$VERSION"
            exit 1
          fi
          
          # Check required fields
          if [ -z "$NAME" ] || [ -z "$VERSION" ] || [ -z "$AUTHOR" ]; then
            echo "‚ùå Missing required metadata"
            echo "Name empty: $([ -z "$NAME" ] && echo "YES" || echo "NO")"
            echo "Version empty: $([ -z "$VERSION" ] && echo "YES" || echo "NO")"  
            echo "Author empty: $([ -z "$AUTHOR" ] && echo "YES" || echo "NO")"
            exit 1
          fi
          
          echo "‚úÖ All required metadata present"

      - name: Check package consistency
        run: |
          if [ -d "ExplorerX_Plugin/packages" ] && [ -n "$(ls -A ExplorerX_Plugin/packages/ 2>/dev/null)" ]; then
            echo "Checking package consistency..."
            
            VERSION=$(grep '<!ENTITY version ' ExplorerX_Plugin/explorerx.plg | sed 's/.*"\([^"]*\)".*/\1/' | tr -d '[:space:]')
            MD5_IN_MANIFEST=$(grep '<!ENTITY md5 ' ExplorerX_Plugin/explorerx.plg | sed 's/.*"\([^"]*\)".*/\1/' | tr -d '[:space:]')
            
            EXPECTED_PACKAGE="explorerx-${VERSION}-x86_64-1.txz"
            
            echo "Looking for package: $EXPECTED_PACKAGE"
            echo "Expected MD5: $MD5_IN_MANIFEST"
            
            if [ -f "ExplorerX_Plugin/packages/$EXPECTED_PACKAGE" ]; then
              echo "‚úÖ Package file exists: $EXPECTED_PACKAGE"
              
              # Check MD5 if .md5 file exists
              if [ -f "ExplorerX_Plugin/packages/${EXPECTED_PACKAGE}.md5" ]; then
                MD5_IN_FILE=$(cut -d' ' -f1 "ExplorerX_Plugin/packages/${EXPECTED_PACKAGE}.md5" | tr -d '[:space:]')
                
                echo "MD5 in .md5 file: '$MD5_IN_FILE'"
                echo "MD5 in manifest: '$MD5_IN_MANIFEST'"
                
                if [ "$MD5_IN_MANIFEST" = "$MD5_IN_FILE" ]; then
                  echo "‚úÖ MD5 hash matches between manifest and .md5 file"
                else
                  echo "‚ùå MD5 mismatch:"
                  echo "  Manifest: '$MD5_IN_MANIFEST'"
                  echo "  File:     '$MD5_IN_FILE'"
                  echo "  Note: This might be expected during development"
                fi
              else
                echo "‚ö†Ô∏è No .md5 file found for package verification"
                
                # Try to compute MD5 and compare
                if command -v md5sum >/dev/null 2>&1; then
                  COMPUTED_MD5=$(md5sum "ExplorerX_Plugin/packages/$EXPECTED_PACKAGE" | cut -d' ' -f1)
                  echo "Computed MD5 (md5sum): $COMPUTED_MD5"
                  if [ "$MD5_IN_MANIFEST" = "$COMPUTED_MD5" ]; then
                    echo "‚úÖ Computed MD5 matches manifest"
                  else
                    echo "‚ö†Ô∏è Computed MD5 doesn't match manifest (expected during development)"
                  fi
                fi
              fi
            else
              echo "‚ö†Ô∏è Expected package not found: $EXPECTED_PACKAGE"
              echo "Available packages:"
              ls -la ExplorerX_Plugin/packages/ || echo "No packages directory"
            fi
          else
            echo "‚ÑπÔ∏è No packages to validate (development mode)"
          fi

      - name: Security scan
        run: |
          echo "Running basic security checks..."
          
          # Check for dangerous rm commands (but allow legitimate plugin cleanup paths)
          # Exclude: /usr/local/emhttp/plugins/, /tmp/plugins/, /boot/config/plugins/, /var/log/plugins/, /tmp/nginx_cache/, /var/cache/nginx/
          if grep -r "rm -rf /" ExplorerX_Plugin/explorerx.plg | grep -v "/usr/local/emhttp/plugins/" | grep -v "/tmp/plugins/" | grep -v "/boot/config/plugins/" | grep -v "/var/log/plugins/" | grep -v "/tmp/nginx_cache/" | grep -v "/var/cache/nginx/"; then
            echo "‚ùå Potentially dangerous rm commands found"
            exit 1
          fi
          
          # Check for hardcoded credentials
          if grep -ri "password\|secret\|token\|key.*=" ExplorerX_Plugin/explorerx.plg | grep -v "EOFCONFIG" | grep -v "support"; then
            echo "‚ùå Potential hardcoded credentials found"
            exit 1
          fi
          
          # Check for eval or dangerous exec patterns
          if grep -r "eval\|exec.*\$" ExplorerX_Plugin/explorerx.plg; then
            echo "‚ùå Potentially dangerous eval/exec patterns found"
            exit 1
          fi
          
          echo "‚úÖ Basic security checks passed"

      - name: Test package creation (if source exists)
        run: |
          if [ -d "ExplorerX_Plugin/source" ]; then
            echo "Testing package creation..."
            
            cd ExplorerX_Plugin
            VERSION=$(grep '<!ENTITY version ' explorerx.plg | sed 's/.*"\([^"]*\)".*/\1/')
            TEST_PACKAGE="test-explorerx-${VERSION}-x86_64-1.txz"
            
            # Create test package
            cd source
            tar -cJf "../$TEST_PACKAGE" usr/ 2>/dev/null || {
              echo "‚ùå Failed to create test package"
              exit 1
            }
            cd ..
            
            # Verify package contents
            echo "Package contents:"
            tar -tJf "$TEST_PACKAGE" | head -20
            
            # Clean up
            rm -f "$TEST_PACKAGE"
            
            echo "‚úÖ Package creation test passed"
          else
            echo "‚ÑπÔ∏è No source directory found - skipping package creation test"
          fi

      - name: Summary
        run: |
          echo "## üéâ Plugin Validation Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Checks Passed:" >> $GITHUB_STEP_SUMMARY
          echo "- XML syntax validation" >> $GITHUB_STEP_SUMMARY
          echo "- Plugin structure verification" >> $GITHUB_STEP_SUMMARY
          echo "- Metadata validation" >> $GITHUB_STEP_SUMMARY
          echo "- Basic security scan" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Plugin Info:" >> $GITHUB_STEP_SUMMARY
          
          VERSION=$(grep '<!ENTITY version ' ExplorerX_Plugin/explorerx.plg | sed 's/.*"\([^"]*\)".*/\1/')
          AUTHOR=$(grep '<!ENTITY author ' ExplorerX_Plugin/explorerx.plg | sed 's/.*"\([^"]*\)".*/\1/')
          NAME=$(grep '<!ENTITY name ' ExplorerX_Plugin/explorerx.plg | sed 's/.*"\([^"]*\)".*/\1/')
          
          echo "- **Name:** $NAME" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Author:** $AUTHOR" >> $GITHUB_STEP_SUMMARY