name: Test ExplorerX Plugin

on:
  push:
    branches: [ main ]
    paths: 
      - 'ExplorerX_Plugin/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'ExplorerX_Plugin/**'

jobs:
  validate-plugin:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate XML syntax
        run: |
          # Install xmllint
          sudo apt-get update
          sudo apt-get install -y libxml2-utils
          
          # Validate plugin XML syntax
          echo "Validating explorerx.plg XML syntax..."
          xmllint --noout ExplorerX_Plugin/explorerx.plg
          echo "‚úÖ XML syntax is valid"

      - name: Check plugin structure
        run: |
          # Check required files exist
          echo "Checking plugin structure..."
          
          if [ ! -f "ExplorerX_Plugin/explorerx.plg" ]; then
            echo "‚ùå Missing explorerx.plg"
            exit 1
          fi
          
          echo "‚úÖ Plugin manifest exists"
          
          # Check if packages directory exists
          if [ ! -d "ExplorerX_Plugin/packages" ]; then
            echo "‚ö†Ô∏è Packages directory not found - this is expected for development"
          else
            echo "‚úÖ Packages directory exists"
            ls -la ExplorerX_Plugin/packages/
          fi

      - name: Validate plugin metadata
        run: |
          echo "Validating plugin metadata..."
          
          # Extract metadata from plugin using proper XML entity parsing
          VERSION=$(grep '<!ENTITY version ' ExplorerX_Plugin/explorerx.plg | sed 's/.*"\([^"]*\)".*/\1/')
          AUTHOR=$(grep '<!ENTITY author ' ExplorerX_Plugin/explorerx.plg | sed 's/.*"\([^"]*\)".*/\1/')
          NAME=$(grep '<!ENTITY name ' ExplorerX_Plugin/explorerx.plg | sed 's/.*"\([^"]*\)".*/\1/')
          
          echo "Debug - Raw version line:"
          grep '<!ENTITY version ' ExplorerX_Plugin/explorerx.plg || echo "Version line not found"
          echo "Extracted values:"
          echo "Plugin Name: '$NAME'"
          echo "Version: '$VERSION'"
          echo "Author: '$AUTHOR'"
          
          # Validate version format (date-based: YYYY.MM.DD.XX.XX)
          if echo "$VERSION" | grep -qE '^[0-9]{4}\.[0-9]{2}\.[0-9]{2}\.[0-9]{2}\.[0-9]{2}$'; then
            echo "‚úÖ Version format is valid"
          else
            echo "‚ùå Invalid version format: $VERSION (expected: YYYY.MM.DD.XX.XX)"
            echo "Current version: '$VERSION'"
            echo "Length: ${#VERSION}"
            exit 1
          fi
          
          # Check required fields
          if [ -z "$NAME" ] || [ -z "$VERSION" ] || [ -z "$AUTHOR" ]; then
            echo "‚ùå Missing required metadata"
            exit 1
          fi
          
          echo "‚úÖ All required metadata present"

      - name: Check package consistency
        run: |
          if [ -d "ExplorerX_Plugin/packages" ] && [ -n "$(ls -A ExplorerX_Plugin/packages/)" ]; then
            echo "Checking package consistency..."
            
            VERSION=$(grep '<!ENTITY version ' ExplorerX_Plugin/explorerx.plg | sed 's/.*"\([^"]*\)".*/\1/')
            MD5_IN_MANIFEST=$(grep '<!ENTITY md5 ' ExplorerX_Plugin/explorerx.plg | sed 's/.*"\([^"]*\)".*/\1/')
            
            EXPECTED_PACKAGE="explorerx-${VERSION}-x86_64-1.txz"
            
            if [ -f "ExplorerX_Plugin/packages/$EXPECTED_PACKAGE" ]; then
              echo "‚úÖ Package file exists: $EXPECTED_PACKAGE"
              
              # Check MD5 if .md5 file exists
              if [ -f "ExplorerX_Plugin/packages/${EXPECTED_PACKAGE}.md5" ]; then
                MD5_IN_FILE=$(cut -d' ' -f1 "ExplorerX_Plugin/packages/${EXPECTED_PACKAGE}.md5")
                
                if [ "$MD5_IN_MANIFEST" = "$MD5_IN_FILE" ]; then
                  echo "‚úÖ MD5 hash matches between manifest and .md5 file"
                else
                  echo "‚ùå MD5 mismatch:"
                  echo "  Manifest: $MD5_IN_MANIFEST"
                  echo "  File:     $MD5_IN_FILE"
                  exit 1
                fi
              else
                echo "‚ö†Ô∏è No .md5 file found for package verification"
              fi
            else
              echo "‚ö†Ô∏è Expected package not found: $EXPECTED_PACKAGE"
              echo "Available packages:"
              ls -la ExplorerX_Plugin/packages/
            fi
          else
            echo "‚ÑπÔ∏è No packages to validate (development mode)"
          fi

      - name: Security scan
        run: |
          echo "Running basic security checks..."
          
          # Check for common security issues in shell scripts
          if grep -r "rm -rf /\|rm -rf \$" ExplorerX_Plugin/explorerx.plg; then
            echo "‚ùå Potentially dangerous rm commands found"
            exit 1
          fi
          
          # Check for hardcoded credentials
          if grep -ri "password\|secret\|token\|key.*=" ExplorerX_Plugin/explorerx.plg | grep -v "EOFCONFIG"; then
            echo "‚ùå Potential hardcoded credentials found"
            exit 1
          fi
          
          # Check for eval or dangerous exec patterns
          if grep -r "eval\|exec.*\$" ExplorerX_Plugin/explorerx.plg; then
            echo "‚ùå Potentially dangerous eval/exec patterns found"
            exit 1
          fi
          
          echo "‚úÖ Basic security checks passed"

      - name: Test package creation (if source exists)
        run: |
          if [ -d "ExplorerX_Plugin/source" ]; then
            echo "Testing package creation..."
            
            cd ExplorerX_Plugin
            VERSION=$(grep '<!ENTITY version ' explorerx.plg | sed 's/.*"\([^"]*\)".*/\1/')
            TEST_PACKAGE="test-explorerx-${VERSION}-x86_64-1.txz"
            
            # Create test package
            cd source
            tar -cJf "../$TEST_PACKAGE" usr/ 2>/dev/null || {
              echo "‚ùå Failed to create test package"
              exit 1
            }
            cd ..
            
            # Verify package contents
            echo "Package contents:"
            tar -tJf "$TEST_PACKAGE" | head -20
            
            # Clean up
            rm -f "$TEST_PACKAGE"
            
            echo "‚úÖ Package creation test passed"
          else
            echo "‚ÑπÔ∏è No source directory found - skipping package creation test"
          fi

      - name: Summary
        run: |
          echo "## üéâ Plugin Validation Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Checks Passed:" >> $GITHUB_STEP_SUMMARY
          echo "- XML syntax validation" >> $GITHUB_STEP_SUMMARY
          echo "- Plugin structure verification" >> $GITHUB_STEP_SUMMARY
          echo "- Metadata validation" >> $GITHUB_STEP_SUMMARY
          echo "- Basic security scan" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Plugin Info:" >> $GITHUB_STEP_SUMMARY
          
          VERSION=$(grep '<!ENTITY version ' ExplorerX_Plugin/explorerx.plg | sed 's/.*"\([^"]*\)".*/\1/')
          AUTHOR=$(grep '<!ENTITY author ' ExplorerX_Plugin/explorerx.plg | sed 's/.*"\([^"]*\)".*/\1/')
          NAME=$(grep '<!ENTITY name ' ExplorerX_Plugin/explorerx.plg | sed 's/.*"\([^"]*\)".*/\1/')
          
          echo "- **Name:** $NAME" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Author:** $AUTHOR" >> $GITHUB_STEP_SUMMARY