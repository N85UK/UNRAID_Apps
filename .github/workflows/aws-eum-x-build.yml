name: Build and Release AWS_EUM_X

on:
  push:
    branches:
      - main
    paths:
      - 'Apps/AWS_EUM_X/**'
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
    paths:
      - 'Apps/AWS_EUM_X/**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: n85uk/aws-eum-x

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: Apps/AWS_EUM_X
        run: npm install

      - name: Run linter
        working-directory: Apps/AWS_EUM_X
        run: npm run lint || true

      - name: Run smoke tests
        working-directory: Apps/AWS_EUM_X
        run: npm run smoke || echo "Smoke tests skipped - requires native modules"
        continue-on-error: true
        env:
          DATA_DIR: ./test-data
          SENDS_ENABLED: 'false'
          SENDS_SIMULATE: 'true'

  build:
    name: Build Multi-arch Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: Apps/AWS_EUM_X
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_TIMESTAMP=${{ github.event.head_commit.timestamp }}
            VERSION=${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate build summary
        if: success()
        run: |
          echo "## ðŸŽ‰ Build Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read CHANGELOG
        id: changelog
        working-directory: Apps/AWS_EUM_X
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          # Extract version-specific changelog (assumes Keep a Changelog format)
          CHANGELOG=$(sed -n "/^## \[${VERSION}\]/,/^## \[/p" CHANGELOG.md | sed '$d')
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body: |
            ## AWS EUM X ${{ github.ref_name }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            ### ðŸ“¦ Installation
            
            **Docker:**
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```
            
            **Unraid:**
            Search for "AWS EUM X" in Community Apps or import template:
            ```
            https://raw.githubusercontent.com/${{ github.repository }}/main/Apps/AWS_EUM_X/my-aws-eum-x.xml
            ```
            
            ### ðŸ”— Links
            - [Documentation](https://github.com/${{ github.repository }}/tree/main/Apps/AWS_EUM_X)
            - [Docker Image](${{ env.REGISTRY }}/${{ env.IMAGE_NAME }})
            - [IAM Policy Examples](https://github.com/${{ github.repository }}/tree/main/Apps/AWS_EUM_X/iam)
            
            ---
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ github.event.before }}...v${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            Apps/AWS_EUM_X/my-aws-eum-x.xml
            Apps/AWS_EUM_X/icons/aws-eum-x.svg

      - name: Notify Community Apps
        if: success()
        run: |
          echo "## ðŸ“¢ Release Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Next steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Update Community Apps template repository" >> $GITHUB_STEP_SUMMARY
          echo "2. Test installation on fresh Unraid instance" >> $GITHUB_STEP_SUMMARY
          echo "3. Announce on Unraid forums" >> $GITHUB_STEP_SUMMARY
