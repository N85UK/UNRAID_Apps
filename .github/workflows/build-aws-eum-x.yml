name: Build and Push AWS_EUM_X Docker Image

on:
  push:
    branches:
      - main
    paths:
      - 'Apps/AWS_EUM_X/**'
      - '.github/workflows/build-aws-eum-x.yml'
  pull_request:
    paths:
      - 'Apps/AWS_EUM_X/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., 1.0.0)'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: n85uk/aws-eum-x

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=AWS EUM X
            org.opencontainers.image.description=Modern, secure, observable SMS interface for AWS Pinpoint on Unraid
            org.opencontainers.image.vendor=N85UK
            org.opencontainers.image.source=https://github.com/N85UK/UNRAID_Apps
      
      - name: Get version from package.json
        id: package-version
        run: |
          VERSION=$(node -p "require('./Apps/AWS_EUM_X/package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./Apps/AWS_EUM_X
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.package-version.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_TIMESTAMP=${{ github.event.head_commit.timestamp }}
            APP_VERSION=${{ steps.package-version.outputs.version }}
      
      - name: Run smoke tests
        if: github.event_name != 'pull_request'
        run: |
          echo "Waiting for container to be available..."
          sleep 10
          
          # Pull the image we just built
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Run container for testing
          docker run -d \
            --name aws-eum-x-test \
            -p 8080:80 \
            -e NODE_ENV=production \
            -e SENDS_ENABLED=false \
            -e SENDS_SIMULATE=true \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Wait for container to start
          sleep 5
          
          # Test health endpoint
          echo "Testing /health endpoint..."
          curl -f http://localhost:8080/health || exit 1
          
          # Test ready endpoint
          echo "Testing /ready endpoint..."
          curl http://localhost:8080/ready || true
          
          # Test probe endpoint
          echo "Testing /probe/aws endpoint..."
          curl http://localhost:8080/probe/aws || true
          
          # Show logs
          echo "Container logs:"
          docker logs aws-eum-x-test
          
          # Cleanup
          docker stop aws-eum-x-test
          docker rm aws-eum-x-test
      
      - name: Generate release notes
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          cat > release-notes.md << 'EOF'
          ## AWS EUM X v${{ steps.package-version.outputs.version }}
          
          **Docker Image:** `ghcr.io/n85uk/aws-eum-x:latest`
          
          ### Quick Start
          
          **Unraid Template URL:**
          ```
          https://raw.githubusercontent.com/N85UK/UNRAID_Apps/main/Apps/AWS_EUM_X/my-aws-eum-x.xml
          ```
          
          **Docker Run:**
          ```bash
          docker run -d \
            --name aws-eum-x \
            -p 8080:80 \
            -e AWS_ACCESS_KEY_ID=your_key \
            -e AWS_SECRET_ACCESS_KEY=your_secret \
            -e AWS_REGION=us-east-1 \
            -v /mnt/user/appdata/aws-eum-x:/app/data \
            ghcr.io/n85uk/aws-eum-x:latest
          ```
          
          ### Features
          - âœ… Structured logging with automatic secret redaction
          - âœ… Health and readiness probes for monitoring
          - âœ… First-run wizard for guided setup
          - âœ… DryRun support for safe testing
          - âœ… MPS-aware rate limiting with queue
          - âœ… Message part estimator (GSM-7/UCS-2)
          - âœ… Support bundle generator
          
          ### Build Info
          - **Commit:** ${{ github.sha }}
          - **Build Date:** ${{ github.event.head_commit.timestamp }}
          - **Platforms:** linux/amd64, linux/arm64
          
          EOF
          cat release-notes.md
      
      - name: Create GitHub Release
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.version != 'latest'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: AWS EUM X v${{ github.event.inputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Summary
        if: github.event_name != 'pull_request'
        run: |
          echo "## ðŸŽ‰ Build Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${{ steps.package-version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Unraid Installation" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to Unraid Docker tab" >> $GITHUB_STEP_SUMMARY
          echo "2. Click 'Add Container'" >> $GITHUB_STEP_SUMMARY
          echo "3. In 'Template repositories', add:" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "   https://raw.githubusercontent.com/N85UK/UNRAID_Apps/main/Apps/AWS_EUM_X/my-aws-eum-x.xml" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "4. Select 'AWS_EUM_X' from user templates" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Docker Pull" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
